# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema

trigger:
  - main
  - master
  - table
  - dev

jobs:
  - job: blobtestubuntu20_04
    displayName: Blob Test Linux Ubuntu 20.04 LTS
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        node_10_x:
          node_version: 10.x
        node_12_x:
          node_version: 12.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run test:blob
        workingDirectory: "./"
        displayName: "npm run test:blob"
        env: {}
        
  - job: blobtestubuntu18_04
    displayName: Blob Test Linux Ubuntu 18.04
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        node_10_x:
          node_version: 10.x
        node_12_x:
          node_version: 12.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"
  
      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"
  
      - script: |
          npm run test:blob
        workingDirectory: "./"
        displayName: "npm run test:blob"
        env: {}

  - job: blobtestwin
    displayName: Blob Test Windows
    pool:
      vmImage: "windows-2022"
    strategy:
      matrix:
        node_10_x:
          node_version: 10.x
        node_12_x:
          node_version: 12.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run test:blob
        workingDirectory: "./"
        displayName: "npm run test:blob"
        env: {}

  - job: blobtestmac
    displayName: Blob Test Mac
    pool:
      vmImage: "macOS-10.15"
    strategy:
      matrix:
        node_10_x:
          node_version: 10.x
        node_12_x:
          node_version: 12.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run test:blob
        workingDirectory: "./"
        displayName: "npm run test:blob"
        env: {}

  - job: blobtestmysql
    displayName: Blob Test Mysql
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        node_10_x:
          node_version: 10.x
        node_12_x:
          node_version: 12.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          docker run --name mysql -p 13306:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql
          sleep 60
          docker exec mysql mysql -u root -pmy-secret-pw -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;"
          docker exec mysql mysql -u root -pmy-secret-pw -e "create database azurite_blob_test;"
        workingDirectory: "./"
        displayName: "Setup mysql docker instance"

      - script: |
          npm run test:blob:sql:ci
        workingDirectory: "./"
        displayName: "npm run test:blob"
        env: {}

  - job: queuetestlinux
    displayName: Queue Test Linux
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        node_10_x:
          node_version: 10.x
        node_12_x:
          node_version: 12.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run test:queue
        workingDirectory: "./"
        displayName: "npm run test:queue"
        env: {}

  - job: queuetestwin
    displayName: Queue Test Windows
    pool:
      vmImage: "windows-2022"
    strategy:
      matrix:
        node_10_x:
          node_version: 10.x
        node_12_x:
          node_version: 12.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run test:queue
        workingDirectory: "./"
        displayName: "npm run test:queue"
        env: {}

  - job: queuetestmac
    displayName: Queue Test Mac
    pool:
      vmImage: "macOS-10.15"
    strategy:
      matrix:
        node_10_x:
          node_version: 10.x
        node_12_x:
          node_version: 12.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run test:queue
        workingDirectory: "./"
        displayName: "npm run test:queue"
        env: {}

  - job: tabletestlinux
    displayName: Table Test Linux
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        # Table tests no longer suport older node versions
        node_14_x:
          node_version: 14.x
        node_16_x:
          node_version: 16.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run test:table
        workingDirectory: "./"
        displayName: "npm run test:table"
        env: {}

  - job: tabletestwin
    displayName: Table Test Windows
    pool:
      vmImage: "windows-2022"
    strategy:
      matrix:
        # Table tests no longer suport older node versions
        node_14_x:
          node_version: 14.x
        node_16_x:
          node_version: 16.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run test:table
        workingDirectory: "./"
        displayName: "npm run test:table"
        env: {}

  - job: tabletestmac
    displayName: Table Test Mac
    pool:
      vmImage: "macOS-10.15"
    strategy:
      matrix:
        # Table tests no longer suport older node versions
        node_14_x:
          node_version: 14.x
        node_16_x:
          node_version: 16.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run test:table
        workingDirectory: "./"
        displayName: "npm run test:table"
        env: {}

  - job: azuritenodejslinux
    displayName: Azurite Linux
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        # Table tests no longer suport older node versions
        node_14_x:
          node_version: 14.x
        node_16_x:
          node_version: 16.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run lint
        workingDirectory: "./"
        displayName: "tslint"

      - script: |
          npm run validate:npmpack:linux_mac
        workingDirectory: "./"
        displayName: "Validate npm package installation"

      - script: |
          npm run vscode:pack
        workingDirectory: "./"
        displayName: "Validate Visual Studio Code extension package generation"

      - script: |
          sudo npm uninstall -g azurite
          npm run build
          sudo npm install -g
          azurite -v
          azurite-blob -v
          azurite-queue -v
          azurite-table -v
        workingDirectory: "./"
        displayName: "Validate npm global installation from GitHub code base"

  - job: azuritenodejswin
    displayName: Azurite Windows
    pool:
      vmImage: "windows-2022"
    strategy:
      matrix:
        # Table tests no longer suport older node versions
        node_14_x:
          node_version: 14.x
        node_16_x:
          node_version: 16.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run lint
        workingDirectory: "./"
        displayName: "tslint"

      - script: |
          npm run validate:npmpack:win
        workingDirectory: "./"
        displayName: "Validate npm package installation"

      - script: |
          npm run vscode:pack
        workingDirectory: "./"
        displayName: "Validate Visual Studio Code extension package generation"

      - script: |
          npm uninstall -g azurite
          npm run build
          npm install -g
          azurite -v
          azurite-blob -v
          azurite-queue -v
          azurite-table -v
        workingDirectory: "./"
        displayName: "Validate npm global installation from GitHub code base"

  - job: azuritenodejsmac
    displayName: Azurite Mac
    pool:
      vmImage: "macOS-10.15"
    strategy:
      matrix:
        # Table tests no longer suport node_8_x
        node_14_x:
          node_version: 14.x
        node_16_x:
          node_version: 16.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run lint
        workingDirectory: "./"
        displayName: "tslint"

      - script: |
          npm run validate:npmpack:linux_mac
        workingDirectory: "./"
        displayName: "Validate npm package installation"

      - script: |
          npm run vscode:pack
        workingDirectory: "./"
        displayName: "Validate Visual Studio Code extension package generation"

      - script: |
          sudo npm uninstall -g azurite
          npm run build
          sudo npm install -g
          azurite -v
          azurite-blob -v
          azurite-queue -v
          azurite-table -v
        workingDirectory: "./"
        displayName: "Validate npm global installation from GitHub code base"

  - job: docker
    displayName: Docker Build
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run docker:build
        workingDirectory: "./"
        displayName: "Build docker image"

      - script: |
          docker run xstoreazurite.azurecr.io/public/azure-storage/azurite:latest azurite -v
          docker run xstoreazurite.azurecr.io/public/azure-storage/azurite:latest azurite-blob -v
          docker run xstoreazurite.azurecr.io/public/azure-storage/azurite:latest azurite-queue -v
          docker run xstoreazurite.azurecr.io/public/azure-storage/azurite:latest azurite-table -v
        workingDirectory: "./"
        displayName: "Validate docker image"

  - job: governance
    displayName: Component Governance Component Detection
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - task: ComponentGovernanceComponentDetection@0
        inputs:
          scanType: "Register"
          verbosity: "Verbose"
          alertWarningLevel: "High"

  - job: exetest
    displayName: .exe Test Windows
    pool:
      vmImage: "windows-2022"
    strategy:
      matrix:
        # one of the node modules use a try/catch syntax not supported by node 8
        # node_8_x:
        #   node_version: 8.x
        # our .exe build program is currently incompatible with node 10
        # node_10_x:
        #   node_version: 10.x
        node_12_x:
          node_version: 14.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run build:exe
        workingDirectory: "./"
        displayName: "npm run build:exe"
        env: {}

      - script: |
          npm run test:exe
        workingDirectory: "./"
        displayName: "npm run test:exe"
        env: {}

  - job: linuxTest
    displayName: binary Test Linux
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        # one of the node modules use a try/catch syntax not supported by node 8
        # node_8_x:
        #   node_version: 8.x
        # our .exe build program is currently incompatible with node 10
        # node_10_x:
        #   node_version: 10.x
        node_12_x:
          node_version: 12.x
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(node_version)"
        displayName: "Install Node.js"

      - script: |
          npm ci
        workingDirectory: "./"
        displayName: "npm ci"

      - script: |
          npm run build:linux
        workingDirectory: "./"
        displayName: "npm run build:linux"
        env: {}

      - script: |
          npm run test:linux
        workingDirectory: "./"
        displayName: "npm run test:linux"
        env: {}
