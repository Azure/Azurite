/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
// tslint:disable:object-literal-sort-keys

import * as msRest from "@azure/ms-rest-js";

import * as Mappers from "./mappers";
import { Operation } from "./operation";
import * as Parameters from "./parameters";

const serializer = new msRest.Serializer(Mappers);
// specifications for new method group start
const serviceListFileSystemsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.resource0,
    Parameters.prefix,
    Parameters.marker0,
    Parameters.maxResults,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.requestId,
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FileSystemList,
      headersMapper: Mappers.ServiceListFileSystemsHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const serviceSetPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype0,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  requestBody: {
    parameterPath: "storageServiceProperties",
    mapper: {
      ...Mappers.StorageServiceProperties,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.ServiceSetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const serviceGetPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype0,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageServiceProperties,
      headersMapper: Mappers.ServiceGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const serviceGetStatisticsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype0,
    Parameters.comp1
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageServiceStats,
      headersMapper: Mappers.ServiceGetStatisticsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const serviceListContainersSegmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.prefix,
    Parameters.marker1,
    Parameters.maxresults,
    Parameters.include0,
    Parameters.timeout,
    Parameters.comp2
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListContainersSegmentResponse,
      headersMapper: Mappers.ServiceListContainersSegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const serviceGetUserDelegationKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype0,
    Parameters.comp3
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  requestBody: {
    parameterPath: "keyInfo",
    mapper: {
      ...Mappers.KeyInfo,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.UserDelegationKey,
      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const serviceGetAccountInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.restype1,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      headersMapper: Mappers.ServiceGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const serviceGetAccountInfoWithHeadOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.restype1,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      headersMapper: Mappers.ServiceGetAccountInfoWithHeadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const serviceSubmitBatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp4
  ],
  headerParameters: [
    Parameters.contentLength0,
    Parameters.multipartContentType,
    Parameters.version,
    Parameters.requestId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.ServiceSubmitBatchHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

// specifications for new method group start
const fileSystemCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{filesystem}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem
  ],
  queryParameters: [
    Parameters.resource1,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.properties,
    Parameters.requestId,
    Parameters.version
  ],
  responses: {
    201: {
      headersMapper: Mappers.FileSystemCreateHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const fileSystemSetPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem
  ],
  queryParameters: [
    Parameters.resource1,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.properties,
    Parameters.requestId,
    Parameters.version,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.FileSystemSetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const fileSystemGetPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "{filesystem}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem
  ],
  queryParameters: [
    Parameters.resource1,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.requestId,
    Parameters.version
  ],
  responses: {
    200: {
      headersMapper: Mappers.FileSystemGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const fileSystemDeleteOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{filesystem}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem
  ],
  queryParameters: [
    Parameters.resource1,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.requestId,
    Parameters.version,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    202: {
      headersMapper: Mappers.FileSystemDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const fileSystemListPathsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{filesystem}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem
  ],
  queryParameters: [
    Parameters.marker0,
    Parameters.path0,
    Parameters.recursive0,
    Parameters.maxResults,
    Parameters.upn,
    Parameters.resource1,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.requestId,
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PathList,
      headersMapper: Mappers.FileSystemListPathsHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const fileSystemListBlobHierarchySegmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{filesystem}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem
  ],
  queryParameters: [
    Parameters.prefix,
    Parameters.delimiter0,
    Parameters.marker1,
    Parameters.maxResults,
    Parameters.include1,
    Parameters.showonly,
    Parameters.timeout,
    Parameters.restype2,
    Parameters.comp2
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListBlobsHierarchySegmentResponseDataLake,
      headersMapper: Mappers.FileSystemListBlobHierarchySegmentHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

// specifications for new method group start
const pathCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.resource2,
    Parameters.marker0,
    Parameters.mode0,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.renameSource,
    Parameters.sourceLeaseId,
    Parameters.properties,
    Parameters.permissions,
    Parameters.umask,
    Parameters.owner,
    Parameters.group,
    Parameters.acl,
    Parameters.proposedLeaseId0,
    Parameters.leaseDuration,
    Parameters.expiryOptions0,
    Parameters.expiresOn,
    Parameters.requestId,
    Parameters.version,
    Parameters.cacheControl,
    Parameters.contentEncoding,
    Parameters.contentLanguage,
    Parameters.contentDisposition,
    Parameters.contentType,
    Parameters.leaseId0,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.sourceIfMatch,
    Parameters.sourceIfNoneMatch,
    Parameters.sourceIfModifiedSince,
    Parameters.sourceIfUnmodifiedSince,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm
  ],
  responses: {
    201: {
      headersMapper: Mappers.PathCreateHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.action0,
    Parameters.maxRecords,
    Parameters.continuation,
    Parameters.mode1,
    Parameters.forceFlag,
    Parameters.position,
    Parameters.retainUncommittedData,
    Parameters.close,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.contentLength1,
    Parameters.properties,
    Parameters.owner,
    Parameters.group,
    Parameters.permissions,
    Parameters.acl,
    Parameters.requestId,
    Parameters.version,
    Parameters.contentMD5,
    Parameters.cacheControl,
    Parameters.contentType,
    Parameters.contentDisposition,
    Parameters.contentEncoding,
    Parameters.contentLanguage,
    Parameters.leaseId0,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {
      bodyMapper: Mappers.SetAccessControlRecursiveResponse,
      headersMapper: Mappers.PathUpdateHeaders
    },
    202: {
      headersMapper: Mappers.PathUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.xMsLeaseAction,
    Parameters.xMsLeaseDuration,
    Parameters.xMsLeaseBreakPeriod,
    Parameters.proposedLeaseId0,
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId0,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathLeaseHeaders
    },
    201: {
      headersMapper: Mappers.PathLeaseHeaders
    },
    202: {
      headersMapper: Mappers.PathLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathReadOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.range0,
    Parameters.xMsRangeGetContentMd5,
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId0,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.PathReadHeaders
    },
    206: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.PathReadHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathGetPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.action1,
    Parameters.upn,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId0,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathDeleteOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.recursive1,
    Parameters.marker0,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId0,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathSetAccessControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.action2
  ],
  headerParameters: [
    Parameters.owner,
    Parameters.group,
    Parameters.permissions,
    Parameters.acl,
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId0,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathSetAccessControlHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathSetAccessControlRecursiveOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.marker0,
    Parameters.mode1,
    Parameters.forceFlag,
    Parameters.maxRecords,
    Parameters.action3
  ],
  headerParameters: [
    Parameters.acl,
    Parameters.requestId,
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SetAccessControlRecursiveResponse,
      headersMapper: Mappers.PathSetAccessControlRecursiveHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathFlushDataOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.position,
    Parameters.retainUncommittedData,
    Parameters.close,
    Parameters.action4
  ],
  headerParameters: [
    Parameters.contentLength1,
    Parameters.requestId,
    Parameters.version,
    Parameters.contentMD5,
    Parameters.cacheControl,
    Parameters.contentType,
    Parameters.contentDisposition,
    Parameters.contentEncoding,
    Parameters.contentLanguage,
    Parameters.leaseId0,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathFlushDataHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathAppendDataOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.position,
    Parameters.timeout,
    Parameters.action5
  ],
  headerParameters: [
    Parameters.contentLength1,
    Parameters.transactionalContentCrc64,
    Parameters.requestId,
    Parameters.version,
    Parameters.transactionalContentMD5,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.PathAppendDataHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathSetExpiryOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp5
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.expiryOptions1,
    Parameters.expiresOn
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathSetExpiryHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const pathUndeleteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url,
    Parameters.fileSystem,
    Parameters.path1
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp6
  ],
  headerParameters: [
    Parameters.undeleteSource,
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      headersMapper: Mappers.PathUndeleteHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

// specifications for new method group start
const containerCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype2
  ],
  headerParameters: [
    Parameters.metadata,
    Parameters.access,
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    201: {
      headersMapper: Mappers.ContainerCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerGetPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype2
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0
  ],
  responses: {
    200: {
      headersMapper: Mappers.ContainerGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerGetPropertiesWithHeadOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype2
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0
  ],
  responses: {
    200: {
      headersMapper: Mappers.ContainerGetPropertiesWithHeadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerDeleteOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype2
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    202: {
      headersMapper: Mappers.ContainerDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerSetMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype2,
    Parameters.comp7
  ],
  headerParameters: [
    Parameters.metadata,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.ifModifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.ContainerSetMetadataHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerGetAccessPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype2,
    Parameters.comp8
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SignedIdentifier"
            }
          }
        }
      },
      headersMapper: Mappers.ContainerGetAccessPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerSetAccessPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype2,
    Parameters.comp8
  ],
  headerParameters: [
    Parameters.access,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  requestBody: {
    parameterPath: [
      "options",
      "containerAcl"
    ],
    mapper: {
      serializedName: "containerAcl",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "SignedIdentifier"
          }
        }
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    200: {
      headersMapper: Mappers.ContainerSetAccessPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerSubmitBatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{containerName}",
  urlParameters: [
    Parameters.url,
    Parameters.containerName
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.restype2,
    Parameters.comp4
  ],
  headerParameters: [
    Parameters.contentLength0,
    Parameters.multipartContentType,
    Parameters.version,
    Parameters.requestId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.ContainerSubmitBatchHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerAcquireLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp9,
    Parameters.restype2
  ],
  headerParameters: [
    Parameters.duration,
    Parameters.proposedLeaseId0,
    Parameters.version,
    Parameters.requestId,
    Parameters.action6,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    201: {
      headersMapper: Mappers.ContainerAcquireLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerReleaseLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp9,
    Parameters.restype2
  ],
  headerParameters: [
    Parameters.leaseId1,
    Parameters.version,
    Parameters.requestId,
    Parameters.action7,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.ContainerReleaseLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerRenewLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp9,
    Parameters.restype2
  ],
  headerParameters: [
    Parameters.leaseId1,
    Parameters.version,
    Parameters.requestId,
    Parameters.action8,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.ContainerRenewLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerBreakLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp9,
    Parameters.restype2
  ],
  headerParameters: [
    Parameters.breakPeriod,
    Parameters.version,
    Parameters.requestId,
    Parameters.action9,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    202: {
      headersMapper: Mappers.ContainerBreakLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerChangeLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp9,
    Parameters.restype2
  ],
  headerParameters: [
    Parameters.leaseId1,
    Parameters.proposedLeaseId1,
    Parameters.version,
    Parameters.requestId,
    Parameters.action10,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.ContainerChangeLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerListBlobFlatSegmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.prefix,
    Parameters.marker1,
    Parameters.maxresults,
    Parameters.include1,
    Parameters.timeout,
    Parameters.restype2,
    Parameters.comp2
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,
      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerListBlobHierarchySegmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.prefix,
    Parameters.delimiter1,
    Parameters.marker1,
    Parameters.maxresults,
    Parameters.include1,
    Parameters.timeout,
    Parameters.restype2,
    Parameters.comp2
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,
      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerGetAccountInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.restype1,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      headersMapper: Mappers.ContainerGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const containerGetAccountInfoWithHeadOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "{containerName}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.restype1,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      headersMapper: Mappers.ContainerGetAccountInfoWithHeadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

// specifications for new method group start
const blobDownloadOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.snapshot,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.range1,
    Parameters.rangeGetContentMD5,
    Parameters.rangeGetContentCRC64,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.BlobDownloadHeaders
    },
    206: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.BlobDownloadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobGetPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.snapshot,
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobSetAccessControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.action2
  ],
  headerParameters: [
    Parameters.owner,
    Parameters.group,
    Parameters.posixPermissions,
    Parameters.posixAcl,
    Parameters.requestId,
    Parameters.version,
    Parameters.leaseId0,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobSetAccessControlHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError
    }
  },
  serializer
};

const blobUndeleteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp6
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobUndeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobSetHTTPHeadersOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.blobCacheControl,
    Parameters.blobContentType,
    Parameters.blobContentMD5,
    Parameters.blobContentEncoding,
    Parameters.blobContentLanguage,
    Parameters.blobContentDisposition,
    Parameters.leaseId0,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobSetHTTPHeadersHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobSetMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp7
  ],
  headerParameters: [
    Parameters.metadata,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobSetMetadataHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobAcquireLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp9
  ],
  headerParameters: [
    Parameters.duration,
    Parameters.proposedLeaseId0,
    Parameters.version,
    Parameters.requestId,
    Parameters.action6,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    201: {
      headersMapper: Mappers.BlobAcquireLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobReleaseLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp9
  ],
  headerParameters: [
    Parameters.leaseId1,
    Parameters.version,
    Parameters.requestId,
    Parameters.action7,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobReleaseLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobRenewLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp9
  ],
  headerParameters: [
    Parameters.leaseId1,
    Parameters.version,
    Parameters.requestId,
    Parameters.action8,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobRenewLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobChangeLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp9
  ],
  headerParameters: [
    Parameters.leaseId1,
    Parameters.proposedLeaseId1,
    Parameters.version,
    Parameters.requestId,
    Parameters.action10,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobChangeLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobBreakLeaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp9
  ],
  headerParameters: [
    Parameters.breakPeriod,
    Parameters.version,
    Parameters.requestId,
    Parameters.action9,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    202: {
      headersMapper: Mappers.BlobBreakLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobCreateSnapshotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp10
  ],
  headerParameters: [
    Parameters.metadata,
    Parameters.version,
    Parameters.requestId,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.leaseId0
  ],
  responses: {
    201: {
      headersMapper: Mappers.BlobCreateSnapshotHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobStartCopyFromURLOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.metadata,
    Parameters.tier0,
    Parameters.rehydratePriority,
    Parameters.copySource,
    Parameters.version,
    Parameters.requestId,
    Parameters.sourceIfModifiedSince,
    Parameters.sourceIfUnmodifiedSince,
    Parameters.sourceIfMatches,
    Parameters.sourceIfNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.leaseId0
  ],
  responses: {
    202: {
      headersMapper: Mappers.BlobStartCopyFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobCopyFromURLOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.metadata,
    Parameters.tier0,
    Parameters.copySource,
    Parameters.version,
    Parameters.requestId,
    Parameters.xMsRequiresSync,
    Parameters.sourceIfModifiedSince,
    Parameters.sourceIfUnmodifiedSince,
    Parameters.sourceIfMatches,
    Parameters.sourceIfNoneMatch,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.leaseId0
  ],
  responses: {
    202: {
      headersMapper: Mappers.BlobCopyFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobAbortCopyFromURLOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.copyId,
    Parameters.timeout,
    Parameters.comp11
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.copyActionAbortConstant,
    Parameters.leaseId0
  ],
  responses: {
    204: {
      headersMapper: Mappers.BlobAbortCopyFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobSetTierOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp12
  ],
  headerParameters: [
    Parameters.tier1,
    Parameters.rehydratePriority,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobSetTierHeaders
    },
    202: {
      headersMapper: Mappers.BlobSetTierHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobGetAccountInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.restype1,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blobGetAccountInfoWithHeadOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.restype1,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      headersMapper: Mappers.BlobGetAccountInfoWithHeadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

// specifications for new method group start
const pageBlobCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.contentLength0,
    Parameters.metadata,
    Parameters.blobContentLength,
    Parameters.blobSequenceNumber,
    Parameters.pageBlobAccessTier,
    Parameters.version,
    Parameters.requestId,
    Parameters.blobType0,
    Parameters.blobContentType,
    Parameters.blobContentEncoding,
    Parameters.blobContentLanguage,
    Parameters.blobContentMD5,
    Parameters.blobCacheControl,
    Parameters.blobContentDisposition,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    201: {
      headersMapper: Mappers.PageBlobCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const pageBlobUploadPagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp13
  ],
  headerParameters: [
    Parameters.contentLength0,
    Parameters.transactionalContentCrc64,
    Parameters.range1,
    Parameters.version,
    Parameters.requestId,
    Parameters.pageWrite0,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifSequenceNumberLessThanOrEqualTo,
    Parameters.ifSequenceNumberLessThan,
    Parameters.ifSequenceNumberEqualTo,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    201: {
      headersMapper: Mappers.PageBlobUploadPagesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const pageBlobClearPagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp13
  ],
  headerParameters: [
    Parameters.contentLength0,
    Parameters.range1,
    Parameters.version,
    Parameters.requestId,
    Parameters.pageWrite1,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifSequenceNumberLessThanOrEqualTo,
    Parameters.ifSequenceNumberLessThan,
    Parameters.ifSequenceNumberEqualTo,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    201: {
      headersMapper: Mappers.PageBlobClearPagesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const pageBlobUploadPagesFromURLOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp13
  ],
  headerParameters: [
    Parameters.sourceUrl,
    Parameters.sourceRange0,
    Parameters.sourceContentMD5,
    Parameters.sourceContentcrc64,
    Parameters.contentLength0,
    Parameters.range2,
    Parameters.version,
    Parameters.requestId,
    Parameters.pageWrite0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.leaseId0,
    Parameters.ifSequenceNumberLessThanOrEqualTo,
    Parameters.ifSequenceNumberLessThan,
    Parameters.ifSequenceNumberEqualTo,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.sourceIfModifiedSince,
    Parameters.sourceIfUnmodifiedSince,
    Parameters.sourceIfMatches,
    Parameters.sourceIfNoneMatch
  ],
  responses: {
    201: {
      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const pageBlobGetPageRangesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.snapshot,
    Parameters.timeout,
    Parameters.comp14
  ],
  headerParameters: [
    Parameters.range1,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PageList,
      headersMapper: Mappers.PageBlobGetPageRangesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const pageBlobGetPageRangesDiffOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.snapshot,
    Parameters.timeout,
    Parameters.prevsnapshot,
    Parameters.comp14
  ],
  headerParameters: [
    Parameters.range1,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PageList,
      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const pageBlobResizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.blobContentLength,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      headersMapper: Mappers.PageBlobResizeHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const pageBlobUpdateSequenceNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp0
  ],
  headerParameters: [
    Parameters.sequenceNumberAction,
    Parameters.blobSequenceNumber,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const pageBlobCopyIncrementalOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp15
  ],
  headerParameters: [
    Parameters.metadata,
    Parameters.copySource,
    Parameters.version,
    Parameters.requestId,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    202: {
      headersMapper: Mappers.PageBlobCopyIncrementalHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

// specifications for new method group start
const appendBlobCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.contentLength0,
    Parameters.metadata,
    Parameters.version,
    Parameters.requestId,
    Parameters.blobType1,
    Parameters.blobContentType,
    Parameters.blobContentEncoding,
    Parameters.blobContentLanguage,
    Parameters.blobContentMD5,
    Parameters.blobCacheControl,
    Parameters.blobContentDisposition,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    201: {
      headersMapper: Mappers.AppendBlobCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const appendBlobAppendBlockOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp16
  ],
  headerParameters: [
    Parameters.contentLength0,
    Parameters.transactionalContentCrc64,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.maxSize,
    Parameters.appendPosition,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {
      headersMapper: Mappers.AppendBlobAppendBlockHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const appendBlobAppendBlockFromUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp16
  ],
  headerParameters: [
    Parameters.sourceUrl,
    Parameters.sourceRange1,
    Parameters.sourceContentMD5,
    Parameters.sourceContentcrc64,
    Parameters.contentLength0,
    Parameters.version,
    Parameters.requestId,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.leaseId0,
    Parameters.maxSize,
    Parameters.appendPosition,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.sourceIfModifiedSince,
    Parameters.sourceIfUnmodifiedSince,
    Parameters.sourceIfMatches,
    Parameters.sourceIfNoneMatch
  ],
  responses: {
    201: {
      headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

// specifications for new method group start
const blockBlobUploadOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout
  ],
  headerParameters: [
    Parameters.contentLength0,
    Parameters.metadata,
    Parameters.tier0,
    Parameters.version,
    Parameters.requestId,
    Parameters.blobType2,
    Parameters.blobContentType,
    Parameters.blobContentEncoding,
    Parameters.blobContentLanguage,
    Parameters.blobContentMD5,
    Parameters.blobCacheControl,
    Parameters.blobContentDisposition,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobUploadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blockBlobStageBlockOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.blockId,
    Parameters.timeout,
    Parameters.comp17
  ],
  headerParameters: [
    Parameters.contentLength0,
    Parameters.transactionalContentCrc64,
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobStageBlockHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blockBlobStageBlockFromURLOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.blockId,
    Parameters.timeout,
    Parameters.comp17
  ],
  headerParameters: [
    Parameters.contentLength0,
    Parameters.sourceUrl,
    Parameters.sourceRange1,
    Parameters.sourceContentMD5,
    Parameters.sourceContentcrc64,
    Parameters.version,
    Parameters.requestId,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.leaseId0,
    Parameters.sourceIfModifiedSince,
    Parameters.sourceIfUnmodifiedSince,
    Parameters.sourceIfMatches,
    Parameters.sourceIfNoneMatch
  ],
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blockBlobCommitBlockListOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.timeout,
    Parameters.comp18
  ],
  headerParameters: [
    Parameters.transactionalContentCrc64,
    Parameters.metadata,
    Parameters.tier0,
    Parameters.version,
    Parameters.requestId,
    Parameters.blobCacheControl,
    Parameters.blobContentType,
    Parameters.blobContentEncoding,
    Parameters.blobContentLanguage,
    Parameters.blobContentMD5,
    Parameters.blobContentDisposition,
    Parameters.leaseId0,
    Parameters.encryptionKey,
    Parameters.encryptionKeySha256,
    Parameters.encryptionAlgorithm,
    Parameters.ifModifiedSince,
    Parameters.ifUnmodifiedSince,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  requestBody: {
    parameterPath: "blocks",
    mapper: {
      ...Mappers.BlockLookupList,
      required: true
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobCommitBlockListHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const blockBlobGetBlockListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [
    Parameters.url
  ],
  queryParameters: [
    Parameters.snapshot,
    Parameters.listType,
    Parameters.timeout,
    Parameters.comp18
  ],
  headerParameters: [
    Parameters.version,
    Parameters.requestId,
    Parameters.leaseId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BlockList,
      headersMapper: Mappers.BlockBlobGetBlockListHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError
    }
  },
  serializer
};

const Specifications: { [key: number]: msRest.OperationSpec } = {};
Specifications[Operation.Service_ListFileSystems] = serviceListFileSystemsOperationSpec;
Specifications[Operation.Service_SetProperties] = serviceSetPropertiesOperationSpec;
Specifications[Operation.Service_GetProperties] = serviceGetPropertiesOperationSpec;
Specifications[Operation.Service_GetStatistics] = serviceGetStatisticsOperationSpec;
Specifications[Operation.Service_ListContainersSegment] = serviceListContainersSegmentOperationSpec;
Specifications[Operation.Service_GetUserDelegationKey] = serviceGetUserDelegationKeyOperationSpec;
Specifications[Operation.Service_GetAccountInfo] = serviceGetAccountInfoOperationSpec;
Specifications[Operation.Service_GetAccountInfoWithHead] = serviceGetAccountInfoWithHeadOperationSpec;
Specifications[Operation.Service_SubmitBatch] = serviceSubmitBatchOperationSpec;
Specifications[Operation.FileSystem_Create] = fileSystemCreateOperationSpec;
Specifications[Operation.FileSystem_SetProperties] = fileSystemSetPropertiesOperationSpec;
Specifications[Operation.FileSystem_GetProperties] = fileSystemGetPropertiesOperationSpec;
Specifications[Operation.FileSystem_Delete] = fileSystemDeleteOperationSpec;
Specifications[Operation.FileSystem_ListPaths] = fileSystemListPathsOperationSpec;
Specifications[Operation.FileSystem_ListBlobHierarchySegment] = fileSystemListBlobHierarchySegmentOperationSpec;
Specifications[Operation.Path_Create] = pathCreateOperationSpec;
Specifications[Operation.Path_Update] = pathUpdateOperationSpec;
Specifications[Operation.Path_Lease] = pathLeaseOperationSpec;
Specifications[Operation.Path_Read] = pathReadOperationSpec;
Specifications[Operation.Path_GetProperties] = pathGetPropertiesOperationSpec;
Specifications[Operation.Path_Delete] = pathDeleteOperationSpec;
Specifications[Operation.Path_SetAccessControl] = pathSetAccessControlOperationSpec;
Specifications[Operation.Path_SetAccessControlRecursive] = pathSetAccessControlRecursiveOperationSpec;
Specifications[Operation.Path_FlushData] = pathFlushDataOperationSpec;
Specifications[Operation.Path_AppendData] = pathAppendDataOperationSpec;
Specifications[Operation.Path_SetExpiry] = pathSetExpiryOperationSpec;
Specifications[Operation.Path_Undelete] = pathUndeleteOperationSpec;
Specifications[Operation.Container_Create] = containerCreateOperationSpec;
Specifications[Operation.Container_GetProperties] = containerGetPropertiesOperationSpec;
Specifications[Operation.Container_GetPropertiesWithHead] = containerGetPropertiesWithHeadOperationSpec;
Specifications[Operation.Container_Delete] = containerDeleteOperationSpec;
Specifications[Operation.Container_SetMetadata] = containerSetMetadataOperationSpec;
Specifications[Operation.Container_GetAccessPolicy] = containerGetAccessPolicyOperationSpec;
Specifications[Operation.Container_SetAccessPolicy] = containerSetAccessPolicyOperationSpec;
Specifications[Operation.Container_SubmitBatch] = containerSubmitBatchOperationSpec;
Specifications[Operation.Container_AcquireLease] = containerAcquireLeaseOperationSpec;
Specifications[Operation.Container_ReleaseLease] = containerReleaseLeaseOperationSpec;
Specifications[Operation.Container_RenewLease] = containerRenewLeaseOperationSpec;
Specifications[Operation.Container_BreakLease] = containerBreakLeaseOperationSpec;
Specifications[Operation.Container_ChangeLease] = containerChangeLeaseOperationSpec;
Specifications[Operation.Container_ListBlobFlatSegment] = containerListBlobFlatSegmentOperationSpec;
Specifications[Operation.Container_ListBlobHierarchySegment] = containerListBlobHierarchySegmentOperationSpec;
Specifications[Operation.Container_GetAccountInfo] = containerGetAccountInfoOperationSpec;
Specifications[Operation.Container_GetAccountInfoWithHead] = containerGetAccountInfoWithHeadOperationSpec;
Specifications[Operation.Blob_Download] = blobDownloadOperationSpec;
Specifications[Operation.Blob_GetProperties] = blobGetPropertiesOperationSpec;
Specifications[Operation.Blob_SetAccessControl] = blobSetAccessControlOperationSpec;
Specifications[Operation.Blob_Undelete] = blobUndeleteOperationSpec;
Specifications[Operation.Blob_SetHTTPHeaders] = blobSetHTTPHeadersOperationSpec;
Specifications[Operation.Blob_SetMetadata] = blobSetMetadataOperationSpec;
Specifications[Operation.Blob_AcquireLease] = blobAcquireLeaseOperationSpec;
Specifications[Operation.Blob_ReleaseLease] = blobReleaseLeaseOperationSpec;
Specifications[Operation.Blob_RenewLease] = blobRenewLeaseOperationSpec;
Specifications[Operation.Blob_ChangeLease] = blobChangeLeaseOperationSpec;
Specifications[Operation.Blob_BreakLease] = blobBreakLeaseOperationSpec;
Specifications[Operation.Blob_CreateSnapshot] = blobCreateSnapshotOperationSpec;
Specifications[Operation.Blob_StartCopyFromURL] = blobStartCopyFromURLOperationSpec;
Specifications[Operation.Blob_CopyFromURL] = blobCopyFromURLOperationSpec;
Specifications[Operation.Blob_AbortCopyFromURL] = blobAbortCopyFromURLOperationSpec;
Specifications[Operation.Blob_SetTier] = blobSetTierOperationSpec;
Specifications[Operation.Blob_GetAccountInfo] = blobGetAccountInfoOperationSpec;
Specifications[Operation.Blob_GetAccountInfoWithHead] = blobGetAccountInfoWithHeadOperationSpec;
Specifications[Operation.PageBlob_Create] = pageBlobCreateOperationSpec;
Specifications[Operation.PageBlob_UploadPages] = pageBlobUploadPagesOperationSpec;
Specifications[Operation.PageBlob_ClearPages] = pageBlobClearPagesOperationSpec;
Specifications[Operation.PageBlob_UploadPagesFromURL] = pageBlobUploadPagesFromURLOperationSpec;
Specifications[Operation.PageBlob_GetPageRanges] = pageBlobGetPageRangesOperationSpec;
Specifications[Operation.PageBlob_GetPageRangesDiff] = pageBlobGetPageRangesDiffOperationSpec;
Specifications[Operation.PageBlob_Resize] = pageBlobResizeOperationSpec;
Specifications[Operation.PageBlob_UpdateSequenceNumber] = pageBlobUpdateSequenceNumberOperationSpec;
Specifications[Operation.PageBlob_CopyIncremental] = pageBlobCopyIncrementalOperationSpec;
Specifications[Operation.AppendBlob_Create] = appendBlobCreateOperationSpec;
Specifications[Operation.AppendBlob_AppendBlock] = appendBlobAppendBlockOperationSpec;
Specifications[Operation.AppendBlob_AppendBlockFromUrl] = appendBlobAppendBlockFromUrlOperationSpec;
Specifications[Operation.BlockBlob_Upload] = blockBlobUploadOperationSpec;
Specifications[Operation.BlockBlob_StageBlock] = blockBlobStageBlockOperationSpec;
Specifications[Operation.BlockBlob_StageBlockFromURL] = blockBlobStageBlockFromURLOperationSpec;
Specifications[Operation.BlockBlob_CommitBlockList] = blockBlobCommitBlockListOperationSpec;
Specifications[Operation.BlockBlob_GetBlockList] = blockBlobGetBlockListOperationSpec;
export default Specifications;
