/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// tslint:disable:max-line-length
// tslint:disable:interface-name
// tslint:disable:quotemark

/**
 * Table Service error.
 */
export interface TableServiceError {
  /**
   * The error message.
   */
  message?: string;
}

/**
 * The retention policy.
 */
export interface RetentionPolicy {
  /**
   * Indicates whether a retention policy is enabled for the service.
   */
  enabled: boolean;
  /**
   * Indicates the number of days that metrics or logging or soft-deleted data should be retained.
   * All data older than this value will be deleted.
   */
  days?: number;
}

/**
 * Azure Analytics Logging settings.
 */
export interface Logging {
  /**
   * The version of Analytics to configure.
   */
  version: string;
  /**
   * Indicates whether all delete requests should be logged.
   */
  deleteProperty: boolean;
  /**
   * Indicates whether all read requests should be logged.
   */
  read: boolean;
  /**
   * Indicates whether all write requests should be logged.
   */
  write: boolean;
  retentionPolicy: RetentionPolicy;
}

/**
 * An interface representing Metrics.
 */
export interface Metrics {
  /**
   * The version of Analytics to configure.
   */
  version?: string;
  /**
   * Indicates whether metrics are enabled for the Table service.
   */
  enabled: boolean;
  /**
   * Indicates whether metrics should generate summary statistics for called API operations.
   */
  includeAPIs?: boolean;
  retentionPolicy?: RetentionPolicy;
}

/**
 * CORS is an HTTP feature that enables a web application running under one domain to access
 * resources in another domain. Web browsers implement a security restriction known as same-origin
 * policy that prevents a web page from calling APIs in a different domain; CORS provides a secure
 * way to allow one domain (the origin domain) to call APIs in another domain.
 */
export interface CorsRule {
  /**
   * The origin domains that are permitted to make a request against the service via CORS. The
   * origin domain is the domain from which the request originates. Note that the origin must be an
   * exact case-sensitive match with the origin that the user age sends to the service. You can
   * also use the wildcard character '*' to allow all origin domains to make requests via CORS.
   */
  allowedOrigins: string;
  /**
   * The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma
   * separated)
   */
  allowedMethods: string;
  /**
   * The request headers that the origin domain may specify on the CORS request.
   */
  allowedHeaders: string;
  /**
   * The response headers that may be sent in the response to the CORS request and exposed by the
   * browser to the request issuer.
   */
  exposedHeaders: string;
  /**
   * The maximum amount time that a browser should cache the preflight OPTIONS request.
   */
  maxAgeInSeconds: number;
}

/**
 * Table Service Properties.
 */
export interface TableServiceProperties {
  /**
   * Azure Analytics Logging settings.
   */
  logging?: Logging;
  /**
   * A summary of request statistics grouped by API in hourly aggregates for tables.
   */
  hourMetrics?: Metrics;
  /**
   * A summary of request statistics grouped by API in minute aggregates for tables.
   */
  minuteMetrics?: Metrics;
  /**
   * The set of CORS rules.
   */
  cors?: CorsRule[];
}

/**
 * An interface representing GeoReplication.
 */
export interface GeoReplication {
  /**
   * The status of the secondary location. Possible values include: 'live', 'bootstrap',
   * 'unavailable'
   */
  status: GeoReplicationStatusType;
  /**
   * A GMT date/time value, to the second. All primary writes preceding this value are guaranteed
   * to be available for read operations at the secondary. Primary writes after this point in time
   * may or may not be available for reads.
   */
  lastSyncTime: Date;
}

/**
 * Stats for the service.
 */
export interface TableServiceStats {
  /**
   * Geo-Replication information for the Secondary Storage Service.
   */
  geoReplication?: GeoReplication;
}

/**
 * The properties for creating a table.
 */
export interface TableProperties {
  /**
   * The name of the table to create.
   */
  tableName?: string;
}

/**
 * The response for a single table.
 */
export interface TableResponse {
  /**
   * The metadata response of the table.
   */
  odatametadata?: string;
  /**
   * The name of the table.
   */
  tableName?: string;
  /**
   * The odata type of the table.
   */
  odatatype?: string;
  /**
   * The id of the table.
   */
  odataid?: string;
  /**
   * The edit link of the table.
   */
  odataeditLink?: string;
}

/**
 * The properties for the table response.
 */
export interface TableResponseProperties {
  /**
   * The name of the table.
   */
  tableName?: string;
  /**
   * The odata type of the table.
   */
  odatatype?: string;
  /**
   * The id of the table.
   */
  odataid?: string;
  /**
   * The edit link of the table.
   */
  odataeditLink?: string;
}

/**
 * The properties for the table query response.
 */
export interface TableQueryResponse {
  /**
   * The metadata response of the table.
   */
  odatametadata?: string;
  /**
   * List of tables.
   */
  value?: TableResponseProperties[];
}

/**
 * An Access policy.
 */
export interface AccessPolicy {
  /**
   * The start datetime from which the policy is active.
   * **NOTE: This entity will be treated as a string instead of a Date because the API can
   * potentially deal with a higher precision value than what is supported by JavaScript.**
   */
  start: string;
  /**
   * The datetime that the policy expires.
   * **NOTE: This entity will be treated as a string instead of a Date because the API can
   * potentially deal with a higher precision value than what is supported by JavaScript.**
   */
  expiry: string;
  /**
   * The permissions for the acl policy.
   */
  permission: string;
}

/**
 * A signed identifier.
 */
export interface SignedIdentifier {
  /**
   * A unique id.
   */
  id: string;
  /**
   * The access policy.
   */
  accessPolicy: AccessPolicy;
}

/**
 * The properties for the table entity query response.
 */
export interface TableEntityQueryResponse {
  /**
   * The metadata response of the table.
   */
  odatametadata?: string;
  /**
   * List of table entities.
   */
  value?: { [propertyName: string]: any }[];
}

/**
 * Additional parameters for a set of operations.
 */
export interface QueryOptions {
  /**
   * Specifies the media type for the response. Possible values include:
   * 'application/json;odata=nometadata', 'application/json;odata=minimalmetadata',
   * 'application/json;odata=fullmetadata'
   */
  format?: OdataMetadataFormat;
  /**
   * Maximum number of records to return.
   */
  top?: number;
  /**
   * Select expression using OData notation. Limits the columns on each record to just those
   * requested, e.g. "$select=PolicyAssignmentId, ResourceId".
   */
  select?: string;
  /**
   * OData filter expression.
   */
  filter?: string;
}

/**
 * An interface representing AzuriteServerTableOptions.
 */
export interface AzuriteServerTableOptions {
  /**
   * Specifies the version of the operation to use for this request. Possible values include:
   * '2019-02-02'
   */
  version?: Version;
}

/**
 * Optional Parameters.
 */
export interface TableQueryOptionalParams {
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * Specifies the data service version. Possible values include: '3.0'
   */
  dataServiceVersion?: DataServiceVersion;
  /**
   * A table query continuation token from a previous call.
   */
  nextTableName?: string;
  /**
   * Additional parameters for the operation
   */
  queryOptions?: QueryOptions;
}

/**
 * Optional Parameters.
 */
export interface TableCreateOptionalParams {
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * Specifies the data service version. Possible values include: '3.0'
   */
  dataServiceVersion?: DataServiceVersion1;
  /**
   * Specifies whether the response should include the inserted entity in the payload. Possible
   * values are return-no-content and return-content. Possible values include: 'return-no-content',
   * 'return-content'
   */
  responsePreference?: ResponseFormat;
  /**
   * Additional parameters for the operation
   */
  queryOptions?: QueryOptions;
}

/**
 * Optional Parameters.
 */
export interface TableDeleteMethodOptionalParams {
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
}

/**
 * Optional Parameters.
 */
export interface TableQueryEntitiesOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * Specifies the data service version. Possible values include: '3.0'
   */
  dataServiceVersion?: DataServiceVersion2;
  /**
   * An entity query continuation token from a previous call.
   */
  nextPartitionKey?: string;
  /**
   * An entity query continuation token from a previous call.
   */
  nextRowKey?: string;
  /**
   * Additional parameters for the operation
   */
  queryOptions?: QueryOptions;
}

/**
 * Optional Parameters.
 */
export interface TableQueryEntitiesWithPartitionAndRowKeyOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * Specifies the data service version. Possible values include: '3.0'
   */
  dataServiceVersion?: DataServiceVersion3;
  /**
   * Additional parameters for the operation
   */
  queryOptions?: QueryOptions;
}

/**
 * Optional Parameters.
 */
export interface TableUpdateEntityOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * Specifies the data service version. Possible values include: '3.0'
   */
  dataServiceVersion?: DataServiceVersion4;
  /**
   * The properties for the table entity.
   */
  tableEntityProperties?: { [propertyName: string]: any };
  /**
   * Match condition for an entity to be updated. If specified and a matching entity is not found,
   * an error will be raised. To force an unconditional update, set to the wildcard character (*).
   * If not specified, an insert will be performed when no existing entity is found to update and a
   * replace will be performed if an existing entity is found.
   */
  ifMatch?: string;
  /**
   * Additional parameters for the operation
   */
  queryOptions?: QueryOptions;
}

/**
 * Optional Parameters.
 */
export interface TableMergeEntityOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * Specifies the data service version. Possible values include: '3.0'
   */
  dataServiceVersion?: DataServiceVersion5;
  /**
   * The properties for the table entity.
   */
  tableEntityProperties?: { [propertyName: string]: any };
  /**
   * Match condition for an entity to be updated. If specified and a matching entity is not found,
   * an error will be raised. To force an unconditional update, set to the wildcard character (*).
   * If not specified, an insert will be performed when no existing entity is found to update and a
   * merge will be performed if an existing entity is found.
   */
  ifMatch?: string;
  /**
   * Additional parameters for the operation
   */
  queryOptions?: QueryOptions;
}

/**
 * Optional Parameters.
 */
export interface TableDeleteEntityOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * Specifies the data service version. Possible values include: '3.0'
   */
  dataServiceVersion?: DataServiceVersion6;
  /**
   * Additional parameters for the operation
   */
  queryOptions?: QueryOptions;
}

/**
 * Optional Parameters.
 */
export interface TableMergeEntityWithMergeOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * Specifies the data service version. Possible values include: '3.0'
   */
  dataServiceVersion?: DataServiceVersion7;
  /**
   * The properties for the table entity.
   */
  tableEntityProperties?: { [propertyName: string]: any };
  /**
   * Match condition for an entity to be updated. If specified and a matching entity is not found,
   * an error will be raised. To force an unconditional update, set to the wildcard character (*).
   * If not specified, an insert will be performed when no existing entity is found to update and a
   * merge will be performed if an existing entity is found.
   */
  ifMatch?: string;
  /**
   * Additional parameters for the operation
   */
  queryOptions?: QueryOptions;
}

/**
 * Optional Parameters.
 */
export interface TableInsertEntityOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * Specifies the data service version. Possible values include: '3.0'
   */
  dataServiceVersion?: DataServiceVersion8;
  /**
   * The properties for the table entity.
   */
  tableEntityProperties?: { [propertyName: string]: any };
  /**
   * Specifies whether the response should include the inserted entity in the payload. Possible
   * values are return-no-content and return-content. Possible values include: 'return-no-content',
   * 'return-content'
   */
  responsePreference?: ResponseFormat;
  /**
   * Additional parameters for the operation
   */
  queryOptions?: QueryOptions;
}

/**
 * Optional Parameters.
 */
export interface TableGetAccessPolicyOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
}

/**
 * Optional Parameters.
 */
export interface TableSetAccessPolicyOptionalParams {
  /**
   * The acls for the table.
   */
  tableAcl?: SignedIdentifier[];
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
}

/**
 * Optional Parameters.
 */
export interface ServiceSetPropertiesOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
}

/**
 * Optional Parameters.
 */
export interface ServiceGetPropertiesOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
}

/**
 * Optional Parameters.
 */
export interface ServiceGetStatisticsOptionalParams {
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the
   * analytics logs when analytics logging is enabled.
   */
  requestId?: string;
}

/**
 * Defines headers for Query operation.
 */
export interface TableQueryHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  /**
   * This header contains the continuation token value.
   */
  xMsContinuationNextTableName?: string;
}

/**
 * Defines headers for Create operation.
 */
export interface TableCreateHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  /**
   * Indicates whether the Prefer request header was honored. If the response does not include this
   * header, then the Prefer header was not honored. If this header is returned, its value will
   * either be return-content or return-no-content.
   */
  preferenceApplied?: string;
  errorCode?: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface TableDeleteHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for QueryEntities operation.
 */
export interface TableQueryEntitiesHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  /**
   * This header contains the continuation token value for partition key.
   */
  xMsContinuationNextPartitionKey?: string;
  /**
   * This header contains the continuation token value for row key.
   */
  xMsContinuationNextRowKey?: string;
  errorCode?: string;
}

/**
 * Defines headers for QueryEntitiesWithPartitionAndRowKey operation.
 */
export interface TableQueryEntitiesWithPartitionAndRowKeyHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated
   */
  eTag?: string;
  /**
   * This header contains the continuation token value for partition key.
   */
  xMsContinuationNextPartitionKey?: string;
  /**
   * This header contains the continuation token value for row key.
   */
  xMsContinuationNextRowKey?: string;
  errorCode?: string;
}

/**
 * Defines headers for UpdateEntity operation.
 */
export interface TableUpdateEntityHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  /**
   * UTC date/time value generated by the service that indicates the time at which the entity was
   * last updated.
   */
  eTag?: string;
  errorCode?: string;
}

/**
 * Defines headers for MergeEntity operation.
 */
export interface TableMergeEntityHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  /**
   * UTC date/time value generated by the service that indicates the time at which the entity was
   * last updated.
   */
  eTag?: string;
  errorCode?: string;
}

/**
 * Defines headers for DeleteEntity operation.
 */
export interface TableDeleteEntityHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for MergeEntityWithMerge operation.
 */
export interface TableMergeEntityWithMergeHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  /**
   * UTC date/time value generated by the service that indicates the time at which the entity was
   * last updated.
   */
  eTag?: string;
  errorCode?: string;
}

/**
 * Defines headers for InsertEntity operation.
 */
export interface TableInsertEntityHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  /**
   * UTC date/time value generated by the service that indicates the time at which the entity was
   * last updated.
   */
  eTag?: string;
  /**
   * Indicates whether the Prefer request header was honored. If the response does not include this
   * header, then the Prefer header was not honored. If this header is returned, its value will
   * either be return-content or return-no-content.
   */
  preferenceApplied?: string;
  /**
   * Indicates the content type of the payload. The value depends on the value specified for the
   * Accept request header.
   */
  contentType?: string;
  errorCode?: string;
}

/**
 * Defines headers for GetAccessPolicy operation.
 */
export interface TableGetAccessPolicyHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for SetAccessPolicy operation.
 */
export interface TableSetAccessPolicyHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for SetProperties operation.
 */
export interface ServiceSetPropertiesHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  errorCode?: string;
}

/**
 * Defines headers for GetProperties operation.
 */
export interface ServiceGetPropertiesHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  errorCode?: string;
}

/**
 * Defines headers for GetStatistics operation.
 */
export interface ServiceGetStatisticsHeaders {
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   */
  clientRequestId?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the Table service used to execute the request. This header is
   * returned for requests made against version 2009-09-19 and above.
   */
  version?: string;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was
   * initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines values for GeoReplicationStatusType.
 * Possible values include: 'live', 'bootstrap', 'unavailable'
 * @readonly
 * @enum {string}
 */
export enum GeoReplicationStatusType {
  Live = 'live',
  Bootstrap = 'bootstrap',
  Unavailable = 'unavailable',
}

/**
 * Defines values for OdataMetadataFormat.
 * Possible values include: 'application/json;odata=nometadata',
 * 'application/json;odata=minimalmetadata', 'application/json;odata=fullmetadata'
 * @readonly
 * @enum {string}
 */
export enum OdataMetadataFormat {
  Applicationjsonodatanometadata = 'application/json;odata=nometadata',
  Applicationjsonodataminimalmetadata = 'application/json;odata=minimalmetadata',
  Applicationjsonodatafullmetadata = 'application/json;odata=fullmetadata',
}

/**
 * Defines values for ResponseFormat.
 * Possible values include: 'return-no-content', 'return-content'
 * @readonly
 * @enum {string}
 */
export enum ResponseFormat {
  ReturnNoContent = 'return-no-content',
  ReturnContent = 'return-content',
}

/**
 * Defines values for Version.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for DataServiceVersion.
 * Possible values include: '3.0'
 * @readonly
 * @enum {string}
 */
export enum DataServiceVersion {
  ThreeFullStopZero = '3.0',
}

/**
 * Defines values for DataServiceVersion1.
 * Possible values include: '3.0'
 * @readonly
 * @enum {string}
 */
export enum DataServiceVersion1 {
  ThreeFullStopZero = '3.0',
}

/**
 * Defines values for DataServiceVersion2.
 * Possible values include: '3.0'
 * @readonly
 * @enum {string}
 */
export enum DataServiceVersion2 {
  ThreeFullStopZero = '3.0',
}

/**
 * Defines values for DataServiceVersion3.
 * Possible values include: '3.0'
 * @readonly
 * @enum {string}
 */
export enum DataServiceVersion3 {
  ThreeFullStopZero = '3.0',
}

/**
 * Defines values for DataServiceVersion4.
 * Possible values include: '3.0'
 * @readonly
 * @enum {string}
 */
export enum DataServiceVersion4 {
  ThreeFullStopZero = '3.0',
}

/**
 * Defines values for DataServiceVersion5.
 * Possible values include: '3.0'
 * @readonly
 * @enum {string}
 */
export enum DataServiceVersion5 {
  ThreeFullStopZero = '3.0',
}

/**
 * Defines values for DataServiceVersion6.
 * Possible values include: '3.0'
 * @readonly
 * @enum {string}
 */
export enum DataServiceVersion6 {
  ThreeFullStopZero = '3.0',
}

/**
 * Defines values for DataServiceVersion7.
 * Possible values include: '3.0'
 * @readonly
 * @enum {string}
 */
export enum DataServiceVersion7 {
  ThreeFullStopZero = '3.0',
}

/**
 * Defines values for DataServiceVersion8.
 * Possible values include: '3.0'
 * @readonly
 * @enum {string}
 */
export enum DataServiceVersion8 {
  ThreeFullStopZero = '3.0',
}

/**
 * Defines values for Version1.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version1 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version2.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version2 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version3.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version3 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version4.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version4 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version5.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version5 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version6.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version6 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version7.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version7 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version8.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version8 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version9.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version9 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version10.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version10 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version11.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version11 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version12.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version12 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version13.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version13 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version14.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version14 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Defines values for Version15.
 * Possible values include: '2019-02-02'
 * @readonly
 * @enum {string}
 */
export enum Version15 {
  TwoZeroOneNineHyphenMinusZeroTwoHyphenMinusZeroTwo = '2019-02-02',
}

/**
 * Contains response data for the query operation.
 */
export type TableQueryResponse2 = TableQueryResponse & TableQueryHeaders & {
  /**
   * The response status code.
   */
  statusCode: 200;
};

/**
 * Contains response data for the create operation.
 */
export type TableCreateResponse = TableResponse & TableCreateHeaders & {
  /**
   * The response status code.
   */
  statusCode: 201 | 204;
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type TableDeleteResponse = TableDeleteHeaders & {
  /**
   * The response status code.
   */
  statusCode: 204;
};

/**
 * Contains response data for the queryEntities operation.
 */
export type TableQueryEntitiesResponse = TableEntityQueryResponse & TableQueryEntitiesHeaders & {
  /**
   * The response status code.
   */
  statusCode: 200;
};

/**
 * Contains response data for the queryEntitiesWithPartitionAndRowKey operation.
 */
export type TableQueryEntitiesWithPartitionAndRowKeyResponse = TableEntityQueryResponse & TableQueryEntitiesWithPartitionAndRowKeyHeaders & {
  /**
   * The response status code.
   */
  statusCode: 200;
};

/**
 * Contains response data for the updateEntity operation.
 */
export type TableUpdateEntityResponse = TableUpdateEntityHeaders & {
  /**
   * The response status code.
   */
  statusCode: 204;
};

/**
 * Contains response data for the mergeEntity operation.
 */
export type TableMergeEntityResponse = TableMergeEntityHeaders & {
  /**
   * The response status code.
   */
  statusCode: 204;
};

/**
 * Contains response data for the deleteEntity operation.
 */
export type TableDeleteEntityResponse = TableDeleteEntityHeaders & {
  /**
   * The response status code.
   */
  statusCode: 204;
};

/**
 * Contains response data for the mergeEntityWithMerge operation.
 */
export type TableMergeEntityWithMergeResponse = TableMergeEntityWithMergeHeaders & {
  /**
   * The response status code.
   */
  statusCode: 204;
};

/**
 * Contains response data for the insertEntity operation.
 */
export type TableInsertEntityResponse = TableInsertEntityHeaders & {
  /**
   * The response body as a node.js Readable stream.
   */
  body?: NodeJS.ReadableStream;
} & {
  /**
   * The response status code.
   */
  statusCode: 201 | 204;
};

/**
 * Contains response data for the getAccessPolicy operation.
 */
export type TableGetAccessPolicyResponse = Array<SignedIdentifier> & TableGetAccessPolicyHeaders & {
  /**
   * The response status code.
   */
  statusCode: 200;
};

/**
 * Contains response data for the setAccessPolicy operation.
 */
export type TableSetAccessPolicyResponse = TableSetAccessPolicyHeaders & {
  /**
   * The response status code.
   */
  statusCode: 204;
};

/**
 * Contains response data for the setProperties operation.
 */
export type ServiceSetPropertiesResponse = ServiceSetPropertiesHeaders & {
  /**
   * The response status code.
   */
  statusCode: 202;
};

/**
 * Contains response data for the getProperties operation.
 */
export type ServiceGetPropertiesResponse = TableServiceProperties & ServiceGetPropertiesHeaders & {
  /**
   * The response status code.
   */
  statusCode: 200;
};

/**
 * Contains response data for the getStatistics operation.
 */
export type ServiceGetStatisticsResponse = TableServiceStats & ServiceGetStatisticsHeaders & {
  /**
   * The response status code.
   */
  statusCode: 200;
};
