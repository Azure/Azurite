{
  "name": "azurite",
  "displayName": "Azurite",
  "description": "An open source Azure Storage API compatible server",
  "icon": "icon.png",
  "version": "3.17.1",
  "publisher": "Azurite",
  "categories": [
    "Other"
  ],
  "main": "./dist/src/main.js",
  "bin": {
    "azurite": "./dist/src/azurite.js",
    "azurite-blob": "./dist/src/blob/main.js",
    "azurite-queue": "./dist/src/queue/main.js",
    "azurite-table": "./dist/src/table/main.js"
  },
  "engines": {
    "node": ">=10.0.0",
    "vscode": "^1.39.0"
  },
  "dependencies": {
    "@azure/ms-rest-js": "^1.5.0",
    "args": "^5.0.1",
    "axios": "^0.27.0",
    "etag": "^1.8.1",
    "express": "^4.16.4",
    "fs-extra": "^10.1.0",
    "jsonwebtoken": "^8.5.1",
    "lokijs": "^1.5.6",
    "morgan": "^1.9.1",
    "multistream": "^2.1.1",
    "mysql2": "^2.1.0",
    "rimraf": "^3.0.2",
    "sequelize": "^6.3.0",
    "tedious": "^14.0.0",
    "to-readable-stream": "^2.1.0",
    "tslib": "^2.3.0",
    "uri-templates": "^0.2.0",
    "uuid": "^3.3.2",
    "winston": "^3.1.0",
    "xml2js": "^0.4.19"
  },
  "devDependencies": {
    "@azure/core-auth": "^1.3.2",
    "@azure/core-rest-pipeline": "^1.2.0",
    "@azure/data-tables": "^13.0.1",
    "@azure/storage-blob": "^12.9.0",
    "@azure/storage-queue": "^12.8.0",
    "@types/args": "^5.0.0",
    "@types/async": "^3.0.1",
    "@types/bluebird": "^3.5.27",
    "@types/etag": "^1.8.0",
    "@types/express": "^4.16.0",
    "@types/fs-extra": "^9.0.13",
    "@types/jsonwebtoken": "^8.3.9",
    "@types/lokijs": "^1.5.2",
    "@types/mocha": "^9.0.0",
    "@types/morgan": "^1.7.35",
    "@types/multistream": "^2.1.1",
    "@types/node": "^14.14.24",
    "@types/rimraf": "^3.0.0",
    "@types/uri-templates": "^0.1.29",
    "@types/uuid": "^3.4.4",
    "@types/validator": "^13.1.4",
    "@types/vscode": "^1.39.0",
    "@types/xml2js": "^0.4.3",
    "autorest": "^3.6.0",
    "azure-storage": "^2.10.3",
    "cross-env": "^6.0.3",
    "cross-var": "^1.1.0",
    "find-process": "^1.4.4",
    "husky": "^7.0.0",
    "lint-staged": "^12.0.3",
    "mocha": "^5.2.0",
    "pkg": "^5.3.0",
    "prettier": "^2.2.1",
    "prettier-tslint": "^0.4.2",
    "rcedit": "^3.0.1",
    "ts-mockito": "^2.6.1",
    "ts-node": "^10.0.0",
    "tslint": "^6.1.3",
    "typescript": "^4.2.4",
    "vsce": "^2.7.0"
  },
  "activationEvents": [
    "*",
    "onCommand:azurite.start",
    "onCommand:azurite.close",
    "onCommand:azurite.clean",
    "onCommand:azurite.start_blob",
    "onCommand:azurite.close_blob",
    "onCommand:azurite.clean_blob",
    "onCommand:azurite.start_queue",
    "onCommand:azurite.close_queue",
    "onCommand:azurite.clean_queue",
    "onCommand:azurite.start_table",
    "onCommand:azurite.close_table",
    "onCommand:azurite.clean_table"
  ],
  "contributes": {
    "commands": [
      {
        "command": "azurite.start",
        "title": "Start",
        "category": "Azurite"
      },
      {
        "command": "azurite.close",
        "title": "Close",
        "category": "Azurite"
      },
      {
        "command": "azurite.clean",
        "title": "Clean",
        "category": "Azurite"
      },
      {
        "command": "azurite.start_blob",
        "title": "Start Blob Service",
        "category": "Azurite"
      },
      {
        "command": "azurite.close_blob",
        "title": "Close Blob Service",
        "category": "Azurite"
      },
      {
        "command": "azurite.clean_blob",
        "title": "Clean Blob Service",
        "category": "Azurite"
      },
      {
        "command": "azurite.start_queue",
        "title": "Start Queue Service",
        "category": "Azurite"
      },
      {
        "command": "azurite.close_queue",
        "title": "Close Queue Service",
        "category": "Azurite"
      },
      {
        "command": "azurite.clean_queue",
        "title": "Clean Queue Service",
        "category": "Azurite"
      },
      {
        "command": "azurite.start_table",
        "title": "Start Table Service",
        "category": "Azurite"
      },
      {
        "command": "azurite.close_table",
        "title": "Close Table Service",
        "category": "Azurite"
      },
      {
        "command": "azurite.clean_table",
        "title": "Clean Table Service",
        "category": "Azurite"
      }
    ],
    "configuration": [
      {
        "title": "Azurite",
        "properties": {
          "azurite.debug": {
            "type": "boolean",
            "default": false,
            "description": "Enable debug log into Visual Studio Code channel"
          },
          "azurite.silent": {
            "type": "boolean",
            "default": false,
            "description": "Disable access log into Visual Studio Code channel"
          },
          "azurite.loose": {
            "type": "boolean",
            "default": false,
            "description": "Enable loose mode which ignores unsupported headers and parameters"
          },
          "azurite.cert": {
            "type": "string",
            "default": "",
            "description": "Path to a locally-trusted pem or pfx certificate file path to enable HTTPS mode"
          },
          "azurite.key": {
            "type": "string",
            "default": "",
            "description": "Path to a locally-trusted pem key file, required when cert points to a pem file"
          },
          "azurite.pwd": {
            "type": "string",
            "default": "",
            "description": "Password for pfx file, required when cert points to a pfx file"
          },
          "azurite.oauth": {
            "type": "string",
            "default": "",
            "description": "Optional. OAuth level. Candidate values: \"basic\""
          },
          "azurite.location": {
            "type": "string",
            "description": "Workspace location folder path (can be relative or absolute). By default, in the VS Code extension, the currently opened folder is used. If launched from the command line, the current process working directory is the default. Relative paths are resolved relative to the default folder."
          },
          "azurite.blobHost": {
            "type": "string",
            "default": "127.0.0.1",
            "description": "Blob service listening endpoint, by default 127.0.0.1"
          },
          "azurite.blobPort": {
            "type": "number",
            "default": 10000,
            "description": "Blob service listening port, by default 10000"
          },
          "azurite.queueHost": {
            "type": "string",
            "default": "127.0.0.1",
            "description": "Queue service listening endpoint, by default 127.0.0.1"
          },
          "azurite.queuePort": {
            "type": "number",
            "default": 10001,
            "description": "Queue service listening port, by default 10001"
          },
          "azurite.tableHost": {
            "type": "string",
            "default": "127.0.0.1",
            "description": "Table service listening endpoint, by default 127.0.0.1"
          },
          "azurite.tablePort": {
            "type": "number",
            "default": 10002,
            "description": "Table service listening port, by default 10002"
          },
          "azurite.skipApiVersionCheck": {
            "type": "boolean",
            "default": false,
            "description": "Skip the request API version check, request with all Api versions will be allowed."
          },
          "azurite.disableProductStyleUrl": {
            "type": "boolean",
            "default": false,
            "description": "Disable getting account name from the host of request Uri, always get account name from the first path segment of request Uri."
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run build",
    "vscode:publish": "vsce publish",
    "vscode:pack": "vsce package",
    "docker:prebuild": "echo skip",
    "docker:build": "npm run docker:prebuild && cross-var docker build --no-cache --rm -f \"Dockerfile\" -t xstoreazurite.azurecr.io/public/azure-storage/azurite:$npm_package_version . && cross-var docker tag xstoreazurite.azurecr.io/public/azure-storage/azurite:$npm_package_version xstoreazurite.azurecr.io/public/azure-storage/azurite:latest",
    "docker:build:internal": "npm run docker:prebuild && cross-var docker build --no-cache --rm -f \"Dockerfile\" -t xstoreazurite.azurecr.io/internal/azure-storage/azurite:$npm_package_version . && cross-var docker tag xstoreazurite.azurecr.io/internal/azure-storage/azurite:$npm_package_version xstoreazurite.azurecr.io/internal/azure-storage/azurite:latest",
    "docker:publish": "cross-var docker push xstoreazurite.azurecr.io/public/azure-storage/azurite:$npm_package_version",
    "docker:publish:internal": "cross-var docker push xstoreazurite.azurecr.io/internal/azure-storage/azurite:$npm_package_version",
    "prepare": "npm run build",
    "build": "tsc",
    "build:autorest:debug": "autorest ./swagger/blob.md --typescript --typescript.debugger --use=E:/GitHub/XiaoningLiu/autorest.typescript.server",
    "build:autorest:blob": "autorest ./swagger/blob.md --typescript  --use=S:/GitHub/XiaoningLiu/autorest.typescript.server",
    "build:autorest:queue": "autorest ./swagger/queue.md --typescript  --use=S:/GitHub/XiaoningLiu/autorest.typescript.server",
    "build:autorest:table": "autorest ./swagger/table.md --typescript  --use=S:/GitHub/XiaoningLiu/autorest.typescript.server",
    "build:exe": "node ./scripts/buildExe.js",
    "build:linux": "node ./scripts/buildLinux.js",
    "watch": "tsc -watch -p ./",
    "blob": "node -r ts-node/register src/blob/main.ts",
    "queue": "node -r ts-node/register src/queue/main.ts",
    "table": "node -r ts-node/register src/table/main.ts",
    "azurite": "node -r ts-node/register src/azurite.ts",
    "lint": "tslint -p tsconfig.json -c tslint.json src/**/*.ts",
    "test": "npm run lint && cross-env NODE_TLS_REJECT_UNAUTHORIZED=0 mocha --compilers ts-node/register --no-timeouts --grep @loki --recursive tests/**/*.test.ts tests/**/**/*.test.ts",
    "test:blob": "npm run lint && cross-env NODE_TLS_REJECT_UNAUTHORIZED=0 mocha --compilers ts-node/register --no-timeouts --grep @loki --recursive tests/blob/*.test.ts tests/blob/**/*.test.ts",
    "test:blob:sql": "npm run lint && cross-env cross-env NODE_TLS_REJECT_UNAUTHORIZED=0 AZURITE_TEST_DB=mysql://root:my-secret-pw@127.0.0.1:3306/azurite_blob_test mocha --compilers ts-node/register --no-timeouts --grep @sql --recursive tests/blob/*.test.ts tests/blob/**/*.test.ts",
    "test:blob:sql:ci": "npm run lint && cross-env cross-env NODE_TLS_REJECT_UNAUTHORIZED=0 AZURITE_TEST_DB=mysql://root:my-secret-pw@127.0.0.1:13306/azurite_blob_test mocha --compilers ts-node/register --no-timeouts --grep @sql --recursive tests/blob/*.test.ts tests/blob/**/*.test.ts",
    "test:queue": "npm run lint && cross-env NODE_TLS_REJECT_UNAUTHORIZED=0 mocha --compilers ts-node/register --no-timeouts --recursive tests/queue/*.test.ts tests/queue/**/*.test.ts",
    "test:table": "npm run lint && cross-env NODE_TLS_REJECT_UNAUTHORIZED=0 mocha --compilers ts-node/register --no-timeouts --recursive tests/table/**/*.test.ts",
    "test:exe": "npm run lint && cross-env NODE_TLS_REJECT_UNAUTHORIZED=0 mocha --compilers ts-node/register --no-timeouts tests/exe.test.ts --exit",
    "test:linux": "npm run lint && cross-env NODE_TLS_REJECT_UNAUTHORIZED=0 mocha --compilers ts-node/register --no-timeouts tests/linuxbinary.test.ts --exit",
    "clean": "rimraf dist typings *.log coverage __testspersistence__ temp __testsstorage__ .nyc_output debug.log *.vsix *.tgz",
    "clean:deep": "npm run clean && rimraf debug.log __*",
    "validate:npmpack:win": "npm install && npm run build && npm pack && cross-var npm install -g azurite-$npm_package_version.tgz && azurite -v && azurite-blob -v && azurite-queue -v && azurite-table -v",
    "validate:npmpack:linux_mac": "npm install && npm run build && npm pack && cross-var sudo npm install -g azurite-$npm_package_version.tgz && azurite -v && azurite-blob -v && azurite-queue -v && azurite-table -v",
    "db:migrate:blob:metadata": "sequelize db:migrate --config migrations/blob/metadata/config/config.json --migrations-path migrations/blob/metadata/migrations",
    "db:create:blob:metadata": "sequelize db:create --config migrations/blob/metadata/config/config.json --migrations-path migrations/blob/metadata/migrations"
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/azure/azurite.git"
  },
  "keywords": [
    "Azurite",
    "Azure",
    "Storage",
    "Blob",
    "Queue",
    "Emulator",
    "Microsoft"
  ],
  "author": "Microsoft",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/azure/azurite/issues"
  },
  "homepage": "https://github.com/azure/azurite#readme"
}